#!/bin/bash

#add color
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
#check version
current="version=1.0"

echo "Checking version using codeberg:"
latest=$(curl --connect-timeout 5 -s https://codeberg.org/firebadnofire/cloudflare-toolbox/raw/branch/main/version.txt | sed -n -e 3p)

#compare version
bypass=false

# Check for the -b or --bypass flag
for arg in "$@"; do
  if [[ "$arg" == "-b" || "$arg" == "--bypass" ]]; then
    bypass=true
  fi
done

if [[ "$latest" == curl:* ]]; then
  echo -e "${YELLOW}Couldn't connect to Codeberg to check for updates.${NC} Continuing anyway..."
elif [[ "$latest" == "$current" ]]; then
  echo -e "${GREEN}You are up to date!${NC}"
else
  echo -e "${RED}Your software is out of date!${NC} Pull the latest repo to update!"
  echo -e "Tip: You may bypass this by invoking -b or --bypass"

  # If the bypass flag isn't set, exit the script
  if [[ "$bypass" != true ]]; then
    exit
  else
    echo "Bypassing the update check."
  fi
fi

#check for dependancies
if ! command -v curl &> /dev/null
then
    echo "curl could not be found"
sleep 1
        exit
fi
if ! command -v openssl &> /dev/null
then
    echo "openssl could not be found"
sleep 1
        exit
fi
if ! command -v jq &> /dev/null
then
    echo "jq could not be found"
sleep 1
        exit
fi

usage() {
  echo "Usage: $0 sub.your.domain"
  echo
  echo "  sub.your.domain               domain of the record"
}

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

### IMPORT VARS ###

import_auth_data() {
  CONFIG_DIR="$HOME/.config/cloudflare-tools"

  # If plaintext auth.txt exists
  if [[ -f "$CONFIG_DIR/auth.txt" ]] && [[ ! -f "$CONFIG_DIR/auth.bin" ]]; then
    # Read variables from plaintext
    while IFS="=" read -r key value; do
      case "$key" in
        APIKEY) APIKEY="$value" ;;
        EMAIL) EMAIL="$value" ;;
        ZONE_ID) ZONE_ID="$value" ;;
      esac
    done < "$CONFIG_DIR/auth.txt"

  # If encrypted auth.bin exists (password or SSH key)
  elif [[ -f "$CONFIG_DIR/auth.bin" ]]; then
    if [[ -f "$CONFIG_DIR/auth.txt" ]]; then
# SSH key decryption
      PRIVKEY_PATH="$HOME/.ssh/id_rsa"
      decrypted_data=$(openssl pkeyutl -decrypt -inkey "$PRIVKEY_PATH" -in "$CONFIG_DIR/auth.bin" 2>/dev/null)
    else
      # Password decryption
      read -s -p "Enter password: " PASSWORD
      decrypted_data=$(openssl enc -aes-256-cbc -d -pbkdf2 -in "$CONFIG_DIR/auth.bin" -k "$PASSWORD" 2>/dev/null)
    fi
eval "$decrypted_data"
  else
    echo "No valid auth file found."
    exit 1
  fi
}

import_auth_data

### END IMPORT VARS ###

# The domain name to query (passed as the first argument to the script)
DOMAIN_NAME="$1"

# Check if a domain name was provided
if [ -z "$DOMAIN_NAME" ]; then
  echo "Usage: $0 domain_name"
  exit 1
fi

# Make the API request to retrieve DNS records for the specified domain
RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?name=${DOMAIN_NAME}" \
     -H "X-Auth-Email: ${EMAIL}" \
     -H "X-Auth-Key: ${APIKEY}" \
     -H "Content-Type: application/json")

# Check if the API call was successful
if echo "$RESPONSE" | grep -q '"success":false'; then
  echo "Error retrieving DNS records:"
  echo "$RESPONSE" | jq '.errors[] | {code, message}'
  exit 1
fi

# Extract and display the DNS record IDs
echo "DNS Record IDs for ${DOMAIN_NAME}:"
echo "$RESPONSE" | jq -r '.result[] | "\(.id) - \(.name) (\(.type)) -> \(.content)"'
unset $APIKEY
unset $EMAIL
unset $ZONE_ID
