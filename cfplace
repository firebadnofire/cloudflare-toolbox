#!/bin/bash
usage() {
  echo "Usage: $0 sub.your.domain contents record_type [true/false]"
  echo
  echo "  sub.your.domain		domain of the record"
  echo "  contents			contents of the record"
  echo "  record_type			record type (A, AAAA, CNAME, etc.)"
  echo "  [true/false]			true = proxied by Cloudflare (optional, defaults to false)"
  echo
  echo "Options:"
  echo "  -h, --help  Show this help message and exit"
}

if [ $# -lt 3 ]; then
  usage
  exit 1
fi


### IMPORT VARS ###

import_auth_data() {
  CONFIG_DIR="$HOME/.config/cloudflare-tools"

  # If plaintext auth.txt exists
  if [[ -f "$CONFIG_DIR/auth.txt" ]] && [[ ! -f "$CONFIG_DIR/auth.bin" ]]; then
    # Read variables from plaintext
    while IFS="=" read -r key value; do
      case "$key" in
        APIKEY) APIKEY="$value" ;;
        EMAIL) EMAIL="$value" ;;
        ZONE_ID) ZONE_ID="$value" ;;
      esac
    done < "$CONFIG_DIR/auth.txt"

  # If encrypted auth.bin exists (password or SSH key)
  elif [[ -f "$CONFIG_DIR/auth.bin" ]]; then
    if [[ -f "$CONFIG_DIR/auth.txt" ]]; then
# SSH key decryption
      PRIVKEY_PATH="$HOME/.ssh/id_rsa"
      decrypted_data=$(openssl pkeyutl -decrypt -inkey "$PRIVKEY_PATH" -in "$CONFIG_DIR/auth.bin" 2>/dev/null)
    else
      # Password decryption
      read -s -p "Enter password: " PASSWORD
      decrypted_data=$(openssl enc -aes-256-cbc -d -pbkdf2 -in "$CONFIG_DIR/auth.bin" -k "$PASSWORD" 2>/dev/null)
    fi
eval "$decrypted_data"
  else
    echo "No valid auth file found."
    exit 1
  fi
}

import_auth_data

### END IMPORT VARS ###

# DNS record details
RECORD_TYPE=$3
RECORD_NAME=$1
RECORD_CONTENT=$2
RECORD_TTL=1       # Auto TTL
PROXIED=${4:-"false"}      # Whether the record is proxied through Cloudflare

if [ "$PROXIED" = "true" ]; then
  PROXIED=true
elif [ "$PROXIED" = "false" ]; then
  PROXIED=false
else
  echo "Invalid value for proxy status. Please use true or false."
  exit 1
fi

# API endpoint
API_ENDPOINT="https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records"

# Prepare JSON data
read -r -d '' JSON_DATA << EOF
{
  "type": "$RECORD_TYPE",
  "name": "$RECORD_NAME",
  "content": "$RECORD_CONTENT",
  "ttl": $RECORD_TTL,
  "proxied": $PROXIED
}
EOF

# Make the API request
END=$(curl -X POST "$API_ENDPOINT" \
     -H "X-Auth-Email: $EMAIL" \
     -H "X-Auth-Key: $APIKEY" \
     -H "Content-Type: application/json" \
     --data "$JSON_DATA")
echo "Success:"
echo "$END" | jq '.success'

