#!/bin/bash

# Add color
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'

# Check version
current="version=1.1"

# Check for the -b or --bypass flag
bypass=false
for arg in "$@"; do
  if [[ "$arg" == "-b" || "$arg" == "--bypass" ]]; then
    bypass=true
  fi
done

# Bypass logic
if [[ "$bypass" == true ]]; then
  latest="$current"
  echo -e "${YELLOW}Bypassing the update check.${NC}"
else
  echo "Checking version using codeberg:"
  latest=$(curl --connect-timeout 5 -s https://codeberg.org/firebadnofire/cloudflare-toolbox/raw/branch/main/version.txt | sed -n -e 3p)

  # Compare version
  if [[ "$latest" == curl:* ]]; then
    echo -e "${YELLOW}Couldn't connect to Codeberg to check for updates.${NC} Continuing anyway..."
  elif [[ "$latest" == "$current" ]]; then
    echo -e "${GREEN}You are up to date!${NC}"
  else
    echo -e "${RED}Your software is out of date!${NC} Pull the latest repo to update!"
    echo -e "Tip: You may bypass this by invoking -b or --bypass"

    # If the bypass flag isn't set, exit the script
    exit
  fi
fi

#check for dependancies
if ! command -v curl &> /dev/null
then
    echo "curl could not be found"
sleep 1
        exit
fi
if ! command -v openssl &> /dev/null
then
    echo "openssl could not be found"
sleep 1
        exit
fi
if ! command -v jq &> /dev/null
then
    echo "jq could not be found"
sleep 1
        exit
fi

usage() {
  echo "Usage: $0 sub.your.domain contents record_type [true/false]"
  echo
  echo "  sub.your.domain		domain of the record"
  echo "  contents			contents of the record"
  echo "  record_type			record type (A, AAAA, CNAME, etc.)"
  echo "  [true/false]			true = proxied by Cloudflare (optional, defaults to false)"
  echo
  echo "Options:"
  echo "  -h, --help  Show this help message and exit"
}

if [ $# -lt 3 ]; then
  usage
  exit 1
fi


### IMPORT VARS ###

authinfo=$(cfgetauth)
echo ""
EMAIL=$(echo "$authinfo" | grep EMAIL | sed 's/EMAIL //g')
APIKEY=$(echo "$authinfo" | grep APIKEY | sed 's/APIKEY //g')
ZONE_ID=$(echo "$authinfo" | grep ZONE_ID | sed 's/ZONE_ID //g')

### END IMPORT VARS ###

# DNS record details
RECORD_TYPE=$3
RECORD_NAME=$1
RECORD_CONTENT=$2
RECORD_TTL=1       # Auto TTL
PROXIED=${4:-"false"}      # Whether the record is proxied through Cloudflare

if [ "$PROXIED" = "true" ]; then
  PROXIED=true
elif [ "$PROXIED" = "false" ]; then
  PROXIED=false
else
  echo "Invalid value for proxy status. Please use true or false."
  exit 1
fi

# API endpoint
API_ENDPOINT="https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records"

# Prepare JSON data
read -r -d '' JSON_DATA << EOF
{
  "type": "$RECORD_TYPE",
  "name": "$RECORD_NAME",
  "content": "$RECORD_CONTENT",
  "ttl": $RECORD_TTL,
  "proxied": $PROXIED
}
EOF

# Make the API request
END=$(curl -X POST "$API_ENDPOINT" \
     -H "X-Auth-Email: $EMAIL" \
     -H "X-Auth-Key: $APIKEY" \
     -H "Content-Type: application/json" \
     --data "$JSON_DATA")
echo "Success:"
echo "$END" | jq '.success'

unset $APIKEY
unset $EMAIL
unset $ZONE_ID
