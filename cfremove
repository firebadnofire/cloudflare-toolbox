#!/bin/bash

#add color
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
#check version
current="version=1.0"

echo "Checking version using codeberg:"
latest=$(curl --connect-timeout 5 -s https://codeberg.org/firebadnofire/cloudflare-toolbox/raw/branch/main/version.txt | sed -n -e 3p)

#compare version
bypass=false

# Check for the -b or --bypass flag
for arg in "$@"; do
  if [[ "$arg" == "-b" || "$arg" == "--bypass" ]]; then
    bypass=true
  fi
done

if [[ "$latest" == curl:* ]]; then
  echo -e "${YELLOW}Couldn't connect to Codeberg to check for updates.${NC} Continuing anyway..."
elif [[ "$latest" == "$current" ]]; then
  echo -e "${GREEN}You are up to date!${NC}"
else
  echo -e "${RED}Your software is out of date!${NC} Pull the latest repo to update!"
  echo -e "Tip: You may bypass this by invoking -b or --bypass"

  # If the bypass flag isn't set, exit the script
  if [[ "$bypass" != true ]]; then
    exit
  else
    echo -e "${YELLOW}Bypassing the update check.${NC}"
  fi
fi

#check for dependancies
if ! command -v curl &> /dev/null
then
    echo "curl could not be found"
sleep 1
        exit
fi
if ! command -v openssl &> /dev/null
then
    echo "openssl could not be found"
sleep 1
        exit
fi
if ! command -v jq &> /dev/null
then
    echo "jq could not be found"
sleep 1
        exit
fi

DOMAIN_NAME="$1"

# Check if a domain name was provided
if [ -z "$DOMAIN_NAME" ]; then
  echo "Usage: $0 (domain_name/ID)"
  exit 1
fi

read -p "Are you sure? (y/n): " answer

# Check the user's input
if [[ "$answer" =~ ^[Yy]$ ]]; then
    echo "Proceeding..."
else
    echo "Aborting..."
    exit
fi


### IMPORT VARS ###

EMAIL=$(cfgetauth | grep EMAIL | sed 's/EMAIL //g')
APIKEY=$(cfgetauth | grep APIKEY | sed 's/APIKEY //g')
ZONE_ID=$(cfgetauth | grep ZONE_ID | sed 's/ZONE_ID //g')

### END IMPORT VARS ###

# Function to check if input is a valid ID (32-character hex string)
is_id() {
    [[ $1 =~ ^[0-9a-fA-F]{32}$ ]]
}

if is_id "$1"; then
        END=$(curl -s --request DELETE "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records/$1" \
         -H "X-Auth-Email: ${EMAIL}" \
         -H "X-Auth-Key: ${APIKEY}" \
         -H "Content-Type: application/json")
    echo "Success:"
    echo "$END" | jq '.success'
    exit
else
    # Make the API request to retrieve DNS records for the specified domain
    RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?name=${DOMAIN_NAME}" \
          -H "X-Auth-Email: ${EMAIL}" \
          -H "X-Auth-Key: ${APIKEY}" \
          -H "Content-Type: application/json")

    # Check if the API call was successful
    if echo "$RESPONSE" | grep -q '"success":false'; then
       echo "Error retrieving DNS records:"
       echo "$RESPONSE" | jq '.errors[] | {code, message}'
    fi
fi

# Extract and display the DNS record IDs
       echo "DNS Record IDs for ${DOMAIN_NAME}:"
       ID=$(echo "$RESPONSE" | jq -r '.result[] | "\(.id)"')
       echo $ID

END=$(curl -s --request DELETE "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records/$ID" \
     -H "X-Auth-Email: ${EMAIL}" \
     -H "X-Auth-Key: ${APIKEY}" \
     -H "Content-Type: application/json")
echo "Success:"
echo "$END" | jq '.success'

unset $APIKEY
unset $EMAIL
unset $ZONE_ID
