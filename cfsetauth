#!/bin/bash

#add color
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
#check version
current="version=1.0"

echo "Checking version using codeberg:"
latest=$(curl --connect-timeout 5 -s https://codeberg.org/firebadnofire/cloudflare-toolbox/raw/branch/main/version.txt | sed -n -e 3p)

#compare version
bypass=false

# Check for the -b or --bypass flag
for arg in "$@"; do
  if [[ "$arg" == "-b" || "$arg" == "--bypass" ]]; then
    bypass=true
  fi
done

if [[ "$latest" == curl:* ]]; then
  echo -e "${YELLOW}Couldn't connect to Codeberg to check for updates.${NC} Continuing anyway..."
elif [[ "$latest" == "$current" ]]; then
  echo -e "${GREEN}You are up to date!${NC}"
else
  echo -e "${RED}Your software is out of date!${NC} Pull the latest repo to update!"
  echo -e "Tip: You may bypass this by invoking -b or --bypass"

  # If the bypass flag isn't set, exit the script
  if [[ "$bypass" != true ]]; then
    exit
  else
    echo "Bypassing the update check."
  fi
fi

#check for dependencies
if ! command -v curl &> /dev/null
then
    echo "curl could not be found"
    sleep 1
    exit
fi
if ! command -v openssl &> /dev/null
then
    echo "openssl could not be found"
    sleep 1
    exit
fi
if ! command -v jq &> /dev/null
then
    echo "jq could not be found"
    sleep 1
    exit
fi

# Directory for storing auth files
CONFIG_DIR="$HOME/.config/cloudflare-tools"

# Create directory if it doesn't exist
mkdir -p "$CONFIG_DIR"

# Function to securely store data with password encryption
store_secure_data() {
  local APIKEY="$1"
  local EMAIL="$2"
  local ZONE_ID="$3"
  local PASSWORD="$4"

  # Encrypt data with PBKDF2 and save as auth.bin
  echo -e "APIKEY=$APIKEY\nEMAIL=$EMAIL\nZONE_ID=$ZONE_ID" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$PASSWORD" -out "$CONFIG_DIR/auth.bin"

  # Set restrictive permissions
  chmod 600 "$CONFIG_DIR/auth.bin"

  # Delete auth.txt if it exists
  [ -f "$CONFIG_DIR/auth.txt" ] && rm -f "$CONFIG_DIR/auth.txt"

  echo "Data has been encrypted and stored securely in $CONFIG_DIR/auth.bin"
}

# Function to securely store plaintext data
store_plaintext_data() {
  local APIKEY="$1"
  local EMAIL="$2"
  local ZONE_ID="$3"

  # Store data in plaintext and save as auth.txt
  echo -e "APIKEY=$APIKEY\nEMAIL=$EMAIL\nZONE_ID=$ZONE_ID" > "$CONFIG_DIR/auth.txt"

  # Set restrictive permissions
  chmod 600 "$CONFIG_DIR/auth.txt"

  # Delete auth.bin if it exists
  [ -f "$CONFIG_DIR/auth.bin" ] && rm -f "$CONFIG_DIR/auth.bin"

  echo "Data has been stored in plaintext in $CONFIG_DIR/auth.txt"
}

# Prompt for user input
read -p "Enter your Cloudflare API Global Key: " APIKEY
read -p "Enter your Cloudflare email: " EMAIL
read -p "Enter your Cloudflare Zone ID: " ZONE_ID

# Prompt for encryption method
echo "Choose an encryption method:"
echo "1) Store in plaintext"
echo "2) Encrypt with password"
read -p "Enter your choice (1 or 2): " ENCRYPTION_CHOICE

case "$ENCRYPTION_CHOICE" in
  1)
    # Store data in plaintext
    store_plaintext_data "$APIKEY" "$EMAIL" "$ZONE_ID"
    ;;
  2)
    # Prompt for password
    echo "You may enter a password to encrypt the data:"
    read -s -p "Enter password: " PASSWORD1
    echo
    echo "Re-enter password to confirm:"
    read -s -p "Enter password: " PASSWORD2
    echo

    if [[ "$PASSWORD1" != "$PASSWORD2" ]]; then
      echo "Passwords do not match. Exiting for security reasons."
      exit 1
    fi

    # Check for minimum password length
    if [[ ${#PASSWORD1} -lt 8 ]]; then
      echo "Password is too short (minimum 8 characters). Exiting."
      exit 1
    fi

    # Securely store encrypted data
    store_secure_data "$APIKEY" "$EMAIL" "$ZONE_ID" "$PASSWORD1"
    ;;
  *)
    echo "Invalid choice. Exiting."
    exit 1
    ;;
esac
unset $APIKEY
unset $EMAIL
unset $ZONE_ID

