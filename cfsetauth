#!/bin/bash

# Add color
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'

# Check version
current="version=1.1"

echo "Checking version using Codeberg:"
latest=$(curl --connect-timeout 5 -s https://codeberg.org/firebadnofire/cloudflare-toolbox/raw/branch/main/version.txt | sed -n -e 3p)

bypass=false

# Check for the -b or --bypass flag
for arg in "$@"; do
  if [[ "$arg" == "-b" || "$arg" == "--bypass" ]]; then
    bypass=true
  elif [[ "$arg" == "-i" || "$arg" == "--in" ]]; then
    input_file="$2"
    shift 2
  fi
done

if [[ "$latest" == curl:* ]]; then
  echo -e "${YELLOW}Couldn't connect to Codeberg to check for updates.${NC} Continuing anyway..."
elif [[ "$latest" == "$current" ]]; then
  echo -e "${GREEN}You are up to date!${NC}"
else
  echo -e "${RED}Your software is out of date!${NC} Pull the latest repo to update!"
  echo -e "Tip: You may bypass this by invoking -b or --bypass"
  if [[ "$bypass" != true ]]; then
    exit
  else
    echo "Bypassing the update check."
  fi
fi

for cmd in curl openssl jq gpg; do
  if ! command -v "$cmd" &>/dev/null; then
    echo "$cmd could not be found"
    sleep 1
    exit
  fi
done

CONFIG_DIR="$HOME/.config/cloudflare-tools"
mkdir -p "$CONFIG_DIR"

# Function to load variables from an input file or stdin
load_vars_from_input() {
  local input="$1"
  if [[ -n "$input" && -f "$input" ]]; then
    source "$input"
  else
    while IFS=' ' read -r key value; do
      case "$key" in
        APIKEY) APIKEY="$value" ;;
        EMAIL) EMAIL="$value" ;;
        ZONE_ID) ZONE_ID="$value" ;;
      esac
    done
  fi
}

# Use input file or stdin if provided
if [[ -n "$input_file" ]]; then
  load_vars_from_input "$input_file"
elif [[ ! -t 0 ]]; then
  load_vars_from_input "/dev/stdin"
fi

# Prompt for variables if not provided via input
[[ -z "$APIKEY" ]] && read -p "Enter your Cloudflare API Global Key: " APIKEY
[[ -z "$EMAIL" ]] && read -p "Enter your Cloudflare email: " EMAIL
[[ -z "$ZONE_ID" ]] && read -p "Enter your Cloudflare Zone ID: " ZONE_ID

store_gpg_data() {
  echo -e "APIKEY=$APIKEY\nEMAIL=$EMAIL\nZONE_ID=$ZONE_ID" | gpg --encrypt --recipient "$1" --output "$CONFIG_DIR/auth.gpg.bin"
  chmod 600 "$CONFIG_DIR/auth.gpg.bin"
  [ -f "$CONFIG_DIR/auth.bin" ] && rm -f "$CONFIG_DIR/auth.bin"
  echo "Data has been encrypted with GPG and stored securely."
}

generate_gpg_key() {
  local EMAIL="cloudflare-toolbox@localhost"
  gpg --batch --gen-key <<EOF
Key-Type: 1
Key-Length: 4096
Subkey-Type: 1
Subkey-Length: 4096
Name-Real: Cloudflare Toolbox
Name-Email: $EMAIL
Expire-Date: 0
EOF
}

store_with_gpg() {
  read -p "Use existing or generate new GPG key? (existing/new): " GPG_CHOICE
  case "$GPG_CHOICE" in
    existing)
      read -p "Enter your GPG key email: " GPG_KEY_ID
      if ! gpg --list-keys "$GPG_KEY_ID" &>/dev/null; then
        echo "Invalid GPG key ID. Exiting."
        exit 1
      fi
      ;;
    new)
      generate_gpg_key
      GPG_KEY_ID=$(gpg --list-keys --with-colons "cloudflare-toolbox@localhost" | grep "^pub" | cut -d':' -f5)
      ;;
    *)
      echo "Invalid choice. Exiting."
      exit 1
      ;;
  esac
  store_gpg_data "$GPG_KEY_ID"
}

echo "Choose encryption method:"
echo "1) Store in plaintext"
echo "2) Encrypt with password"
echo "3) Encrypt with GPG"
read -p "Enter your choice (1, 2, or 3): " ENCRYPTION_CHOICE

case "$ENCRYPTION_CHOICE" in
  1)
    echo -e "APIKEY=$APIKEY\nEMAIL=$EMAIL\nZONE_ID=$ZONE_ID" > "$CONFIG_DIR/auth.txt"
    chmod 600 "$CONFIG_DIR/auth.txt"
    ;;
  2)
    read -s -p "Enter password: " PASSWORD1
    echo
    read -s -p "Re-enter password to confirm: " PASSWORD2
    echo
    [[ "$PASSWORD1" != "$PASSWORD2" ]] && { echo "Passwords do not match."; exit 1; }
    [[ ${#PASSWORD1} -lt 8 ]] && { echo "Password too short."; exit 1; }
    echo -e "APIKEY=$APIKEY\nEMAIL=$EMAIL\nZONE_ID=$ZONE_ID" | openssl enc -aes-256-cbc -pbkdf2 -salt -out "$CONFIG_DIR/auth.bin" -k "$PASSWORD1"
    chmod 600 "$CONFIG_DIR/auth.bin"
    ;;
  3)
    store_with_gpg
    ;;
  *)
    echo "Invalid choice. Exiting."
    exit 1
    ;;
esac

unset APIKEY EMAIL ZONE_ID
